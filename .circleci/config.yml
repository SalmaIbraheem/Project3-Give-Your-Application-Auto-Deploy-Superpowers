version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  

commands:
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        workflowID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws --region us-west-2 s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
              aws --region us-east-1 cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowID>>
              aws --region us-east-1 cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowID>>
    
    revert-migrations:
      description: Revert the last migration
      parameters:
          workflow_id:
              type: string   
              default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
          - run:
              name: Revert migrations
              when: on_fail
              command: |
                  # Your Memstash or kvdb.io GET URL code goes here
                  # Example: kvdb.io
                  SUCCESS=$(curl --insecure  https://kvdb.io/NTroCU7veN9c86NdGT818B/migration_<< parameters.workflow_id >>)
                  # Logic for reverting the database state
                  if (( $SUCCESS == 1 ));
                  then
                      cd ~/project/backend
                      npm install
                      npm run migration:revert
                  fi  
jobs:
    build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm install
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build
  
    build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
              npm fund
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
            
    test-frontend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test
            
    test-backend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Test back-end
            command: |
              cd backend
              npm install
              npm run test
    scan-frontend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Scan front-end
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
    scan-backend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Scan back-end
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
        - slack/notify:
            event: fail
            mentions: '@Salma Ibraheem'
            template: basic_fail_1
            channel: $SLACK_DEFAULT_CHANNEL
            
    deploy-infrastructure:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: INstall gzip and tar to handle (Error tar utility is not present in this image but it is required. Please install it to have workflow workspace capability)
            command:  |
              yum -y install tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              BACKEND_PUBLIC_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName'  --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
            - project/.circleci/ansible/inventory.txt
        - destroy-environment    
        
    configure-infrastructure:
        docker:
          - image: python:3.7-alpine3.11
        steps:
          - checkout
          - add_ssh_keys:
              fingerprints: ["04:74:91:0e:50:f7:c7:68:1a:dc:2c:2f:b2:03:c7:8d"] 
          - attach_workspace:
              at: ~/
          - run:
              name: Install dependencies
              command: |
                apk add --update tar gzip
                pip install awscli
                apk add --update ansible 
                
          - run:
              name: Configure server
              command: |
                cat ./.circleci/ansible/inventory.txt
                export ANSIBLE_HOST_KEY_CHECKING=False
                export RECORD_HOST_KEYS=False
                export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=30   
                echo ENVIROMENT=production > "backend/.env"      
                echo TYPEORM_CONNECTION=postgres >> "backend/.env"
                echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
                echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"          
                echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"      
                echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"            
                echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"      
                echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"     
                echo "CONTENT OF backend/.env"      
                cat backend/.env         
                cd .circleci/ansible
                ansible-playbook -i inventory.txt configure-server.yml -v 
          - destroy-environment 
          
    run-migrations:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - run:
              name: Run migrations
              command: |
                cd backend
                npm install
                npm run migrations > migrations_dump.txt
                cat migrations_dump.txt
          - run:
              name: Send migration results to memstash
              command: |
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                    curl --insecure https://kvdb.io/NTroCU7veN9c86NdGT818B/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
                fi
          - destroy-environment    
    deploy-frontend:
        docker:
          - image:  python:3.7-alpine3.11
        steps:
          - checkout
          - run:
              name: Install dependencies
              command: |
                apk add --update ansible 
                apk add --update tar gzip curl
                pip3 install awscli
                curl -fsSL https://deb.nodesource.com/setup_14.x
                apk add --update nodejs npm
                node --version
                npm --version
          - run:
              name: Get backend url
              command: |
                export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
                export API_URL="http://${BACKEND_IP}:3030"
                echo "API_URL = ${API_URL}"
                echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                cat frontend/.env
          - run:
              name: Deploy frontend objects
              command: |
                cd frontend
                npm install
                npm run build
                tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                #--recursive copies all objects under a specified prefix
                # copy build from dist on to s3 that created on forntend-infra
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          
          - revert-migrations
          - destroy-environment   
          
    deploy-backend:
        docker:
          # Docker image here that supports Ansible
          - image: python:3.7-alpine3.11
        steps:
          # Checkout code from git
          - checkout
          # Add ssh keys with fingerprint
          - add_ssh_keys:
              fingerprints: ["73:3b:70:db:85:76:0a:91:8d:3b:c3:35:81:15:63:c4"]
          # attach workspace
          # to have access to the previously generated inventory.txt from the deploy-infrastructure job.
          - attach_workspace:
              at: ~/
          - run:
              name: Install dependencies
              command: |
                apk add --update tar gzip curl
                pip install awscli
                apk add --update ansible 
                apk add --update nodejs npm

          - run:
              name: Deploy backend
              command: |
                cd backend
                npm i
                npm run build
                cd ..
                # Zip the directory
                tar -C backend -czvf artifact.tar.gz .
                ls
                mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
                mv artifact.tar.gz .circleci/ansible/roles/deploy/files
                #cd ~/project/.circleci/ansible/roles/deploy/files
                #ls
                cd .circleci/ansible
                echo "Contents  of the inventory.txt file is -------"
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml
          # Here's where you will add some code to rollback on failure  
          - revert-migrations
          - destroy-environment
                    
workflows:
    default:
        jobs:
        - build-frontend
        - build-backend
        #- test-frontend:
        #    requires:
        #        - build-frontend
        #- test-backend:
        #    requires:
        #        - build-backend
        #- scan-frontend:
        #    requires:
        #        - build-frontend
        #- scan-backend:
        #    requires:
        #        - build-backend
        - deploy-infrastructure:
            requires: [build-backend,build-frontend]
            #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        - configure-infrastructure:
            requires: [deploy-infrastructure]
        - run-migrations:
            requires: [configure-infrastructure]
        - deploy-frontend:
            requires: [run-migrations]
        - deploy-backend:
            requires: [run-migrations]
            
